Todo: KLineEd
=============

Development work v1.1.30.0
--------------------------

1. Refactor Application structure
    - done - resolve const / readonly issue
	- done - create enum for MxColour - allow colour names rather than integer values in KLineEdCmdApp.json.
	- Rename KLineEdCmdApp Project, KLineEditor.cs and KLineEdCmdApp.json to KScribeCmdApp, KScribeEditor.cs, KScribe.json
	- Rename KLineEdCmdAppTest to KScribeCmdAppTest (KLineEditorTests) 
	- Create KScribeLib Class Library 
		- Move Controller, Model, Utils, View from KScribeCmdApp (not Terminal.cs)
		- Integrate KScribeLib Class Library with KScribeCmdApp - MxStdUtils.cs, KScribeEditor, Terminal.cs.
	- Create KScribeLibTest and move all existing tests except those relating to Program, KScribeEditor
	- Move to MxStdUtilsLib KLineEditor.StartBrowser,  KLineEditor.StartBrowser, KLineEditor.IsValidUri, and KLineEditor.GetXlatUrl + tests

2. Create new GitHub private project in imageqc - KScribe and clone to local C:\Users\wills\source\repos\ImageQC\KScribe
3. Import code from C:\Users\wills\source\repos\wpqs\GenDotNetCmdApps\KLineEd
	- test
	- version
4. Push changes to KScribe v1.0.45.0
5. Delete C:\Users\wills\source\repos\wpqs\GenDotNetCmdApps\KLineEd and clone from v1.0.44.0
    - test

Development work v1.1.31.0
--------------------------

1. Update Packages

2. Implement
	- Refactor CmdLineParamsApp to allow subclass for each parameter - ProcessParam, ValidateParam, HelpForParam
    - Implement System.Text.Json
    --fix //delete all <session> with Duration: 00:00:00 and renumber any following ones
	--export stats //export session data as CSV file
	
	Cursor move - Ctrl+Home = top of chapter, Ctrl+End bottom of chapter, Home = start of line, End = end of line, Ctrl+Left = one word left, Ctrl+Right = one word right,
	SaveAs - switch to PropsView and enable changing of filename / no filename is abort without saving (update FunctionalTests.txt to save to tmp file before starting tests)
	AppDomain.ProcessExit Event or AppDomain.CurrentDomain.ProcessExit to save file - see https://github.com/dotnet/corefx/issues/10012

3.	Improve Unit Tests
		MxBrowserTests
		CursorPositionTests
		SizeTests
		ImportProcTests
		ExportProcTests
		ControllerTests

4.  Measure test coverage

5.  Renumber ErrorCodes

5.	Check Chapter/Session stats are correct

6.  Publish and release
	
Development work v1.1.32.0
--------------------------

1. Refactor
    - Copy MxStdUtilsLib.MxReturnCodeUtils and MxStdUtilsLib.IErrorState to MxReturnCode
    - Update KScribe for new version of MxReturnCode (C++ interop)
	- Replace string literals with resource strings - support for foreign languages
	- Improve Unit Testing
		- Coverage
		- Mock files so [assembly: Xunit.CollectionBehavior(DisableTestParallelization = true)] can be removed from KScribeLibTest

2. Implement Secret Manager lookup for json settings (SVN)


Development work v1.1.33.0
--------------------------

1. Implement ModalDlgView - a modal dialog box

2. Add to MxStdUtilsLib UIElements.cs
	- text box
    - button 
	- radio button selection
	- check box selection
	- drop down list selection
	- tab, arrow moves focus (enter acts)

3. Test UIElements.cs
    - Unit test
	- Modal Dialog box

4. Refactor
	- Move MxStdUtilsLib and MxConsoleLib to their own packages
    - Update KScribe to use MxStdUtilsLib and MxConsoleLib packages

5. Implement 
    --settings and use any settings found in the specified file to override those given in the default (global) .json
		- add username / email / password - use for Azure Logging
		- add last file.ksx
	- use updated MxDotNetUtils to call SettingsFileProc() appropriately

6. Test
	- iOS
	- Check Chapter/Session stats are correct


Development work v1.1.34.0
--------------------------

1. Implement SettingsView - allow command line parameters to be changed from within the Editor

2. Implement Abort - exit without saving unsaved changes
	ModalDlgView - abort y/n?

3. Implement text selection Shift+arrows - invert foregnd/backgnd
	- delete
	- find
	- selection for google 

4. Implement Find, Replace

5. Implement Undo (Ctrl+Z)

6. Implement two line error messages

7. Improve warning messages - use of modal dialog, better separation of data and user errors

8. Improve unit testing and full test


Release work v1.2.30 (first beta release)
-----------------------------------------

1.  Create Logo
2.  Create Windows/iOS Installer - Wix
3.  Create GitHub wiki
		- user manual 
			- list of views
			- help on a view
		- technical 
			- architectural overview
				- MVC pattern
				- factory
			- structure of app
4.  Create YouTube video
5.  Create KScribe.org website


Development work v1.2.30.0
--------------------------

WARNING: changes may break iOS version
	
1. Implement autocorrect spelling checking
	- automatically check last word and if not found switch to SpellEditView
		- Ctrl+A - add to dictionary
		- 0 - switch back to TextEditView (ignore)
		- 1 ... n - replace with suggested word and switch back to TextEditView
	- see	
		- https://stackoverflow.com/questions/15252596/using-the-c-sharp-nhunspell-how-do-i-check-words
		- https://www.codeproject.com/Articles/5277/NetSpell-Spell-Checker-for-NET
		- https://www.codeproject.com/Articles/4572/Using-Word-s-spellchecker-in-C

2. Implement audio
	- play sound on keypress (read into memory at startup)

3. Implement Clipboard
	- Ctrl+V
	- Ctrl+C
	- Ctrl+X

4. Implement encryption --edit 'drive:path\*.ksx' ([clearkey='xxx' | hiddenkey='yyyy'])

5. Implement Steganography --export ... (image='drive:path\*.mp4') --import ... (image='drive:path\*.mp4') 
  https://www.loginworks.com/blogs/use-steganography-c/


Release work v1.3
-----------------

1. Create ConsoleApp launcher for Cmd Line version (Windows only)
2. Create KScribeWinApp - window version
3. Create KScribeMacApp - iOS version
4. Create KScribeAndApp - Andriod phone version
5. Create Blazor TextEditing Control
4. Integrate with SVN
		- store user settings
		- create repository (delete from cmd line - intentional difficult)
		- add files
		- put file(s)
		- get file(s)
		- list files
		- list version stats for selected file
		- diff between selected versions
		- restore from selected version
5. Implement Dictionary versioning and listing of words added (Ctrl+K)
	--updatedict (see settings) - dictionary file stored in SVN
	--Ctrl+K (see settings) list added words since last version of dictionary (del allows removal)
6. Implement Structure Editing - a way of breaking-up a document into sections
	- Command Ctrl+Q toggles between normal text editing (NTE) mode and structure editing (SE) mode
	- Structure Editing commands
		- Ctrl+H+1 - H1 Caps with double underline (=) on last line followed by blank line
		- Ctrl+H+2 - H2 Mixed case with single underline (-) on last line followed by blank line
		- Ctrl+H+3 - H3 Mixed case with no underline, blank line
		- Ctrl+H+4 - H4 Mixed case with no underline, blank line, intent 1 tab 
	    - Ctrl+N toggles display of notes contained in <n>...</n> in SE mode (not shown in NTE)
			- Ctrl+S start note (Ctrl+N followed by <n>)
			- Ctrl+E end note (</n> followed by Ctrl+N)
		- Ctrl+Z 
			- Save contents of line buffer and move previous heading into it, DisplayLastLines
		- Ctrl+B 
			- Save contents of line buffer and move next heading into it, DisplayLastLines
		- Ctrl+Q
			-  Save contents of line buffer and resume NTE in sected section 
7. Implement integration with KScribe.org Learning Features (AI)
	- list misspellings by frequency
	- send list to your account on KScribe (spelling test)
	- list mistypes (S rather than D, etc)
	- send list to your account on KScribe (typing test)
	- export chapter to your account on KScribe for AI grammar analysis, idiom misuse, etc and generate a report (PDF)








			 